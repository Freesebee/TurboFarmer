@using Microsoft.Extensions.Logging
@using Models.GameLogic;
@using GeneticSharp.Domain.Chromosomes;
@using GeneticSharp.Domain.Fitnesses;
@using GeneticSharp.Domain.Populations;
@using GeneticSharp.Domain.Crossovers;
@using GeneticSharp.Domain.Selections;
@using GeneticSharp.Domain.Mutations;
@using GeneticSharp.Domain.Terminations;
@using GeneticSharp.Domain;

@inject ILogger<HomePage> Logger

<p>
    <button @onclick="StartGA">Rozpocznij naukę</button>
</p>

@code {
    private void StartGA()
    {
        Logger.LogInformation("Genetic algorithm called");
        var chromosome = new FloatingPointChromosome(
            new double[] { 0, 0, 0, 0 },
            new double[] { 1, 1, 1, 1 },
            new int[] { 10, 10, 10, 10 },
            new int[] { 0, 0, 0, 0 });

        var population = new Population(50, 100, chromosome);

        var fitness = new FuncFitness((c) =>
        {
            var fc = c as FloatingPointChromosome;
            var values = fc.ToFloatingPoints();
            var x1 = values[0];
            var y1 = values[1];
            var x2 = values[2];
            var y2 = values[3];
            return Math.Sqrt(Math.Pow(x2 - x1, 2) + Math.Pow(y2 - y1, 2));
        });

        var selection = new EliteSelection();
        var crossover = new UniformCrossover(0.5f);
        var mutation = new FlipBitMutation();
        var termination = new FitnessStagnationTermination(100);
        
        var ga = new GeneticAlgorithm(population, fitness, selection, crossover, mutation);
        ga.Termination = termination;
        
        var latestFitness = 0.0;
        
        ga.GenerationRan += (sender, e) =>
        {
            var bestChromosome = ga.BestChromosome as FloatingPointChromosome;
            var bestFitness = bestChromosome.Fitness.Value;
            if (bestFitness != latestFitness)
            {
                latestFitness = bestFitness;
                var phenotype = bestChromosome.ToFloatingPoints();
                Console.WriteLine(
                    "Generation {0,2}: ({1},{2}),({3},{4}) = {5}",
                    ga.GenerationsNumber,
                    phenotype[0],
                    phenotype[1],
                    phenotype[2],
                    phenotype[3],
                    bestFitness
                );
            }
        };

        ga.Start();

        Console.WriteLine(ga.BestChromosome.Fitness);
    }
}